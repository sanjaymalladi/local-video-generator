from manim import *
class QuantumIntro(Scene):
    def construct(self):
    title = Tex("Quantum Physics: A Tiny Adventure!", color=BLACK).scale(1.2)
    title.set_background(WHITE, opacity=1)
    self.play(Write(title))
    self.wait(2)
    self.play(FadeOut(title))
    self.wait(1)
    atom = SVGMobject("atom.svg") # Replace with an actual atom SVG file
    atom.set_color(BLUE)
    atom.scale(2)
    atom.move_to(ORIGIN)
    description = Tex("Welcome to the world of...", color=BLACK).scale(0.7)
    description.set_background(WHITE, opacity=1)
    description.move_to(UP*3)
    self.play(FadeIn(atom),Write(description))
    self.wait(2)
    quantum_text = Tex("Quantum Physics!", color=RED).scale(1)
    quantum_text.set_background(WHITE, opacity=1)
    quantum_text.next_to(description, DOWN)
    self.play(Write(quantum_text))
    self.wait(2)
    self.play(FadeOut(atom,quantum_text,description))
    self.wait(1)
class SuperpositionScene(Scene):
    def construct(self):
    text1 = Tex("Superposition:", color=BLACK).scale(1)
    text1.set_background(WHITE, opacity=1)
    text1.to_edge(UP)
    self.play(Write(text1))
    box = Rectangle(width=3, height=3).set_color(BLUE)
    self.play(Create(box))
    cat_alive = SVGMobject("cat_alive.svg") # Replace with actual cat SVG
    cat_alive.set_color(GREEN)
    cat_alive.scale(0.5).move_to(box.get_center())
    cat_dead = SVGMobject("cat_dead.svg") # Replace with actual cat SVG
    cat_dead.set_color(RED)
    cat_dead.scale(0.5).move_to(box.get_center())
    group = VGroup(cat_alive, cat_dead)
    self.play(FadeIn(cat_alive, cat_dead))
    self.wait(1)
    text2 = Tex("The cat is both alive ", "AND", " dead...", color=BLACK).scale(0.6)
    text2.set_color_by_tex("AND", RED)
    text2.set_background(WHITE, opacity=1)
    text2.next_to(box, DOWN)
    self.play(Write(text2))
    self.wait(2)
    arrow = Arrow(start=DOWN, end=UP, color=BLACK).scale(0.5).next_to(text2, DOWN)
    observe = Tex("...until we look!", color=BLACK).scale(0.6)
    observe.set_background(WHITE, opacity=1)
    observe.next_to(arrow, DOWN)
    self.play(Create(arrow),Write(observe))
    self.wait(2)
    self.play(FadeOut(group,text2,arrow, observe))
    self.wait(1)
    self.play(Transform(box, cat_alive))
    self.wait(2)
    self.play(FadeOut(box,text1))
class QuantumEntanglement(Scene):
    def construct(self):
    text_title = Tex("Quantum Entanglement:", color=BLACK).scale(1)
    text_title.set_background(WHITE, opacity=1)
    text_title.to_edge(UP)
    self.play(Write(text_title))
    particle1 = Circle(radius=0.5, color=BLUE, fill_opacity=1).shift(LEFT * 3)
    particle2 = Circle(radius=0.5, color=RED, fill_opacity=1).shift(RIGHT * 3)
    line = Line(particle1.get_right(), particle2.get_left(), color=GREEN)
    text_entangle = Tex("Linked!", color=BLACK).scale(0.7)
    text_entangle.set_background(WHITE, opacity=1)
    text_entangle.move_to(line.get_center() + UP * 0.5)
    self.play(Create(particle1), Create(particle2))
    self.wait(1)
    self.play(Create(line),Write(text_entangle))
    self.wait(2)
    arrow1 = CurvedArrow(start_point=particle1.get_center()+ UP*1, end_point=particle1.get_center()+DOWN*1, color=BLUE)
    arrow2 = CurvedArrow(start_point=particle2.get_center()+ UP*1, end_point=particle2.get_center()+DOWN*1, color=RED)
    self.play(Rotate(particle1, angle=PI),Rotate(particle2, angle=PI))
    self.play(Create(arrow1),Create(arrow2))
    text_instant = Tex("Instant Change!", color=BLACK).scale(0.7)
    text_instant.set_background(WHITE, opacity=1)
    text_instant.next_to(line, DOWN)
    self.play(Write(text_instant))
    self.wait(2)
    self.play(FadeOut(particle1,particle2,line,arrow1,arrow2,text_entangle,text_instant,text_title))
    self.wait(1)
class WaveParticleDuality(Scene):
    def construct(self):
    text_title = Tex("Wave-Particle Duality:", color=BLACK).scale(1)
    text_title.set_background(WHITE, opacity=1)
    text_title.to_edge(UP)
    self.play(Write(text_title))
    particle = Dot(color=BLUE, radius=0.3).shift(LEFT * 3)
    wave = FunctionGraph(lambda x: np.sin(x), x_range=[-5, 5], color=RED).shift(RIGHT * 3)
    text_particle = Tex("Particle", color=BLUE).scale(0.6)
    text_particle.set_background(WHITE, opacity=1)
    text_particle.next_to(particle, DOWN)
    text_wave = Tex("Wave", color=RED).scale(0.6)
    text_wave.set_background(WHITE, opacity=1)
    text_wave.next_to(wave, DOWN)
    self.play(Create(particle), Create(wave), Write(text_particle), Write(text_wave))
    self.wait(1)
    text_both = Tex("It's Both!", color=BLACK).scale(0.7)
    text_both.set_background(WHITE, opacity=1)
    text_both.move_to(DOWN * 2)
    self.play(Write(text_both))
    self.wait(2)
    equation = MathTex(r"E = mc^2", color=GREEN).scale(1.2)
    equation.set_background(WHITE, opacity=1)
    equation.move_to(UP * 1)
    self.play(Write(equation))
    self.wait(3)
    self.play(FadeOut(particle, wave, text_particle, text_wave, text_both, equation,text_title))
    self.wait(1)
class QuantumConclusion(Scene):
    def construct(self):
    conclusion_text = Tex("Quantum physics is weird,", " but cool!", color=BLACK).scale(1)
    conclusion_text.set_color_by_tex("but cool!", GREEN)
    conclusion_text.set_background(WHITE, opacity=1)
    self.play(Write(conclusion_text))
    thanks_text = Tex("Thanks for watching!", color=BLACK).scale(0.8)
    thanks_text.set_background(WHITE, opacity=1)
    thanks_text.next_to(conclusion_text, DOWN)
    self.play(Write(thanks_text))
    self.wait(3)